// Example 1
// Two process mutual exclusion

pta

module lock1

    x1 : [0..9999] init 0;
    c1 : clock;

    [] x1=0 -> (x1'=1232)&(c1'=0);
    [sndReq12] x1=1232 & c1=0-> (x1'=2232);
    [sndReq13] x1=2232 & c1=0 -> (x1'=232);

    [deliverGranted21] x1=232 -> (x1'=233);
    [deliverGranted31] x1=232 -> (x1'=234);

    [deliverGranted31] x1=233 -> (x1'=235);
    [deliverGranted21] x1=234 -> (x1'=235);

    [expire1] x1=235 -> (x1'=0);

endmodule

module lock2

    x2 : [0..9999] init 0;
    c2 : clock;

    [deliverReq12] x2=0 -> (x2'=111)&(c2'=0);
    [sndGranted21] x2=111 & c2=0 -> (x2'=11);
    [expire1] x2=11 -> (x2'=0);

endmodule

module lock3 = lock2 [x2 = x3, c2 = c3,
                      deliverReq12 = deliverReq13, sndGranted21 = sndGranted31]
endmodule

module channel12

    c12 : [0..9] init 0;

    [sndReq12] c12=0 -> 0.999:(c12'=2) + 0.001:(c12'=0);
    [deliverReq12] c12=2 -> (c12'=0);

endmodule

module channel13 =
    channel12 [c12 = c13,
               sndReq12 = sndReq13, deliverReq12 = deliverReq13]
endmodule

module channel21

    c21 : [0..9] init 0;

    [sndGranted21] c21=0 -> 0.999:(c21'=1) + 0.001:(c21'=0);
    [deliverGranted21] c21=1 -> (c21'=0);

endmodule

module channel31 =
    channel21 [c21 = c31,
               sndGranted21 = sndGranted31, deliverGranted21 = deliverGranted31]
endmodule
